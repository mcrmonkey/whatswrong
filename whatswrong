#!/bin/bash

# (C) Copyright Bashton Ltd 2012
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as 
# published by the Free Software Foundation
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


### Options
## Enable colour output
COLOUR=1
SUPPRESSOK=1

SEM_low="10"


## Services to look for
CHECKSVCS="/usr/sbin/apache2 /usr/sbin/httpd /usr/sbin/varnishd /usr/sbin/nginx /usr/sbin/mysqld /usr/bin/mongod /usr/sbin/asterisk /usr/sbin/named /usr/sbin/bind9"





### External Programs
DMESG="/bin/dmesg"
GREP="/bin/grep"
EGREP="/bin/egrep -q"
PGREP="/usr/bin/pgrep"
SED="/bin/sed"
AWK="/usr/bin/awk"
WC="/usr/bin/wc"
DF="/bin/df"
IPCS="/usr/bin/ipcs -s"
BC="/usr/bin/bc"



### Generic multi-use vars
DMO="$($DMESG)"
BADCOUNT=0
WARNCOUNT=0
OKCOUNT=0

### Generic functions
OK() {
    if [ $SUPPRESSOK -ne 1 ]; then
        if [ $COLOUR -eq 1 ]; then
            echo -e "[\033[32m OK \033[00m]\t $1"
        else
            echo "[ OK ]\t $1"
        fi
    fi
    OKCOUNT=$(($OKCOUNT+1))
}

BAD() {
    if [ $COLOUR -eq 1 ]; then
        echo -e "[\033[31mERROR\033[00m]\t $1"
    else
        echo "[ ERROR ]\t $1"
    fi
    BADCOUNT=$(($BADCOUNT+1))
}


WARN() {
    if [ $COLOUR -eq 1 ]; then
        echo -e "[\033[33mWARN\033[00m]\t $1"
    else
        echo "[ WARN ]\t $1"
    fi
    WARNCOUNT=$(($WARNCOUNT+1))
}

totals() {
    echo -en "\nFindings:\n $BADCOUNT errors\n $WARNCOUNT Warnings\n $OKCOUNT checks passed\n\n"
}

percentage() {
    # Given the total and the max, returns an integer percentage
    echo "scale=2; $1 / $2 * 100" | bc | $SED -e 's/\..*//'
}



### Disk checks

uncorrectable_drive_error() {
    if echo $DMO | $GREP -q 'UncorrectableError'; then
        BAD "Uncorrectable drive error found in dmesg log"
    else
        OK "No uncorrectable drive errors"
    fi
}

buffer_io_error() {
    if echo $DMO| $GREP -q 'Buffer I/O error on device'; then
        BAD "I/O errors in ringbuffer log"
    else
        OK "No I/O errors reported in ringbuffer log"
    fi
}

disk_full() {
    if $DF | $AWK '{print $5}' | $EGREP '(100|99)%'; then
        BAD "One or more volumes are full"
    else
        OK "All volumes have some free space"
    fi
}

inode_full() {
    if $DF -i | $AWK '{print $5}' | $EGREP '(100|99)%'; then
        BAD "One or more volumes have no available inodes"
    else
        OK "All volumes have inodes available"
    fi
}

remounted_ro() {
    if echo $DMO | $GREP -q 'Remounting filesystem read-only'; then
        BAD "Filesystem re-mounted read only"
    else
        OK "No filesystems re-mounted read only"
    fi
}


### VM checks
oom_hit() {
    if echo $DMO | $GREP -q 'invoked oom-killer'; then
        BAD "Out of memory killer has been triggered"
    else
        OK "No out of memory conditions found"
    fi
}

high_swap() {
    total=$($GREP 'SwapTotal' /proc/meminfo  | $AWK '{print $2}')
    if [ $total -eq 0 ]; then
        WARN "There appears to be no swap on this system"
        return
    fi
    used=$($GREP 'SwapFree' /proc/meminfo  | $AWK '{print $2}')
    if [ $(percentage $used $total) -lt 75 ]; then
        BAD "Swap usage above 25%"
    else
        OK "Swap usage below 25%"
    fi
}

sem_test() {
    num="$(echo -ne "$($IPCS -l |grep "max number of arrays" |$AWK '{print $6}') -  $($IPCS -u |grep "used arrays"|$AWK '{print $4}')\n" |$BC)"

    if [ $num -lt $SEM_low ]; then
        BAD "Semaphores available below $SEM_low"
    else
        OK "Semaphores available higher than $SEM_low"
    fi

}


nfs_timeout() {
    if $EGREP '^nfs ' /proc/modules; then
        if echo $DMO | $EGREP "nfs: server .* not responding"; then
            BAD "NFS timeouts found"
        else
            OK "No NFS timeouts found"
        fi
    fi
}

### Global and kernel checks
recently_rebooted() {
    if [ $(cat /proc/uptime | $SED -e 's/\..*//') -lt 1800 ]; then
        BAD "Server has been up less than 30 minutes"
    else
        OK "Server has been running longer than 30 minutes"
    fi
}

hung_task() {
    if echo $GMO | $GREP -q "hung_task_timeout_secs"; then
        BAD "Evidence of hung tasks found in kernel log"
    else
        OK "No hung tasks logged in ringbuffer"
    fi
}

soft_lockup() {
    if echo $DMO | $GREP -q "BUG: soft lockup"; then
        BAD "CPU soft lockup logged in ringbuffer"
    else
        OK "No CPU soft lockups logged in ringbuffer"
    fi
}

conntrack_full() {
    # Don't check if connection tracking module isn't loaded
    if $EGREP "(ip|nf)_conntrack " /proc/modules; then
        if echo $DMO | $EGREP "(ip|nf)_conntrack: table full"; then
          BAD "Connection tracking table overflows found"
        else
          OK "No connection tracking table overflows found"
        fi
    fi
}

### Process checks

check_running() {
    # Arguments: process file
    if [ -x $1 ]; then
        pname=$(basename $1)
        if [ $($PGREP $pname | $WC -l) -lt 1 ]; then
          BAD "$pname present but not running"
        else
          OK "$pname running"
        fi
    fi
}

echo -ne "\nWhatsWrong...\n\n"

recently_rebooted
conntrack_full
hung_task
soft_lockup

oom_hit
high_swap
sem_test

buffer_io_error
uncorrectable_drive_error
remounted_ro
disk_full
inode_full
nfs_timeout

# Process checks should only report a problem if a service is
# installed but not running

for I in $CHECKSVCS; do check_running $I; done

totals
